#!/bin/bash

num_a=500
num_b=1000

if [ $num_a -lt $num_b ]; then
    echo "$num_a is less than $num_b!"
fi



Conditionals allow the programmer to implement decision making within a shell script based on certain conditions or events.
The conditionals we are referring to are of course, if, then and else. For example, we can improve our backup script by implementing a sanity check to compare the number of files and directories within a source directory we intend to backup and the resulting backup file. The pseudocode for this kind of implementation will read as follows:

IF the number of files between the source and destination target is equal THEN print the OK message, ELSE, print ERROR.



#!/bin/bash

num_a=800
num_b=600

if [ $num_a -lt $num_b ]; then
    echo "$num_a is less than $num_b!"
else
    echo "$num_a is greater than $num_b!"
fi


Lines 3 - 4 are used to initialize an integer variables. On Line 6 we begin an if conditional block. We further compare both variables and if the comparison evaluation yields true, then on Line 7 the echo command will inform us, that the value within the variable $num_a is less when compared with the variable $num_b. Lines 8 closes our if conditional block with a fi keyword.

The important observation to make from the script execution is that, in the situation when the variable $num_a greater than $num_b our script fails to react. This is where the last piece of the puzzle, else conditional comes in handy.

The Line 8 now holds the else part of our conditional block. If the comparison evaluation on Line 6 reports false the code below else statement, in our case Line 9 is executed.
